plugins {
    id "org.flywaydb.flyway" version "9.2.0"
    id 'org.springframework.boot' version '2.6.6'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "com.github.johnrengelman.processes" version "0.5.0"
    id "org.springdoc.openapi-gradle-plugin" version "1.3.3"
    id "org.openapi.generator" version "5.3.0"
    id 'java'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

version = '0.0.1-SNAPSHOT'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven {
        url "https://gitlab.com/api/v4/groups/6253882/-/packages/maven"
        name "GitLab"
        credentials(HttpHeaderCredentials) {
            name = gitlabAuthMode
            value = gitlabAuthToken
        }
        authentication {
            header(HttpHeaderAuthentication)
        }
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springdoc:springdoc-openapi-ui:1.5.12'
    implementation 'net.logstash.logback:logstash-logback-encoder:6.4'
    implementation 'org.flywaydb:flyway-core'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
    useJUnitPlatform()
}

openApi {
    forkProperties.set("-Dspring.profiles.active=dev")
    waitTimeInSeconds.set(30)
}

jar {
    enabled = false
}

task buildJavaSdk(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "java"
    inputSpec = "$buildDir/openapi.json".toString()
    outputDir = "$buildDir/sdk/java".toString()
    templateDir = "$projectDir/sdk/templates"
    apiPackage = "$group.$app"+".sdk"
    invokerPackage = "$group.$app"+".sdk.invoker"
    modelPackage = "$group.$app"+".sdk.model"
    additionalProperties = [
            gitlabProjectId : "$gitlabProjectId"
    ]
    configOptions = [
            dateLibrary: "java8",
            library    : "webclient",
            openApiNullable: "false",
            artifactDescription: "API SDK"
    ]
    globalProperties = [
            apiDocs: "true",
            modelDocs: "true"
    ]
    groupId = "$group"
    id = "$sdkId"
    version = "$project.version"
    finalizedBy "copyAvroTypesInSdk"
}

task buildAngularSdk(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "typescript-angular"
    inputSpec = "$buildDir/openapi.json".toString()
    outputDir = "$buildDir/sdk/angular".toString()
    configFile = "$projectDir/sdk/config/angular-generator.yml"
    templateDir = "$projectDir/sdk/templates"
    apiPackage = "api"
    modelPackage = "model"
    additionalProperties = [
            fileNaming: "kebab-case",
            npmName : "@fmsbict/$sdkNpmName",
            npmVersion: "$project.version",
            ngVersion: "$sdkNgVersion",
            apiModulePrefix: "$sdkModulePrefix",
            configurationPrefix: "$sdkModulePrefix",
            snapshot: false,
    ]
    globalProperties = [
            apiDocs: "false",
            modelDocs: "false"
    ]
    groupId = "$group"
    id = "$sdkId"
    version = "$project.version"
}

task copyAvroTypesInSdk (type: Copy) {
    from "src/main/java/be/fmsb/$group/sdk"
    into "build/sdk/java/src/main/java/be/fmsb/$group/sdk"
}
